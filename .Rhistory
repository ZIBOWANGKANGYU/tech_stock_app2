})
# convert to flextables
example_data <- lapply(example_data, function(ele_i) flextable::flextable(ele_i))
# start timer
start_time <- Sys.time()
# Apply formatting styles
formatted_wb <- formatxlsx_future_lapply(example_data, wb)
library(future)
# Apply formatting styles
formatted_wb <- formatxlsx_future_lapply(example_data, wb)
openxlsx::saveWorkbook(wb, "OneDrive - ProCogia/NEPC/wb.xlsx")
openxlsx::saveWorkbook(wb, "OneDrive - ProCogia/NEPC/wb2.xlsx")
openxlsx::saveWorkbook(formatted_wb, "OneDrive - ProCogia/NEPC/formatted_wb2.xlsx")
shiny::runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
shiny::runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
list(1)
list(1,)
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
runApp('OneDrive - ProCogia/NEPC/Download-Export-Module')
install.packages("highcharter")
mtcars
# HIGHCHARTER
highcharter::hchart(
mtcars,
"scatter",
hcaes(x = mpg, y = wt, group = gear)
)
library(highcharter)
# HIGHCHARTER
hchart(
mtcars,
"scatter",
hcaes(x = mpg, y = wt, group = gear)
)
saveWidget(hc, "highchart.html")
library(ggplot2)
library(grid)
library(cowplot)
library(dplyr)
library(flextable)
library(htmlwidgets)
library(webshot)
library(jpeg)
library(magick)
library(highcharter)
hc <- hchart(
mtcars,
"scatter",
hcaes(x = mpg, y = wt, group = gear)
)
saveWidget(hc, "highchart.html")
webshot("highchart.html", "highchart.png", vwidth = 500, vheight = 500) # take some time
gg4 <- image_read('highchart.png') %>%
image_ggplot()
gg5 <- image_read('highchart.png') %>%
image_ggplot()
gg5
hc
install.packages("webshot2")
# HIGHCHARTER
hc <- hchart(
mtcars,
"scatter",
hcaes(x = mpg, y = wt, group = gear)
)
saveWidget(hc, "highchart.html")
webshot("highchart.html", "highchart.png", vwidth = 500, vheight = 500, delay = 1) # some data did not show
gg5 <- image_read('highchart.png') %>%
image_ggplot()
gg5
library(tidyverse)
library(parallel)
li <- list(a = 1, b = 2, c = 3, d = 4, e = 5)
mclapply(1:5, function(x) {li[[i]] <- 100}, mc.cores = 7)
mclapply(1:5, function(x) {li[[i]] <- 100}, mc.cores = 5)
mclapply(1:5, function(x) {li[[x]] <- 100}, mc.cores = 5)
li
li
li <- list(1, 2, 3, 4, 5)
mclapply(1:5, function(x) {li[[x]] <- 100}, mc.cores = 5)
li
lapply(1:5, function(x) {li[[x]] <- 100})
li
li
lapply(1:5, function(x) {
browser()
li[[x]] <- 100
})
x
li
li
wb <- createWorkbook("My name here")
library(openxlsx)
wb <- createWorkbook("sample_workbook")
bodyStyle <- createStyle(border = "TopBottom", borderColour = "#4F81BD")
mclapply(1:5, function(x) {
addStyle(wb, sheet = x, bodyStyle, rows = 2:6, cols = 1:6, gridExpand = TRUE)
}, mc.cores = 5)
addWorksheet(wb, "001", gridLines = FALSE)
addWorksheet(wb, "002", gridLines = FALSE)
addWorksheet(wb, "003", gridLines = FALSE)
addWorksheet(wb, "004", gridLines = FALSE)
addWorksheet(wb, "005", gridLines = FALSE)
mclapply(1:5, function(x) {
addStyle(wb, sheet = x, bodyStyle, rows = 2:6, cols = 1:6, gridExpand = TRUE)
}, mc.cores = 5)
saveWorkbook(wb, "Downloads/addStyleExample.xlsx", overwrite = TRUE)
wb <- createWorkbook("sample_workbook")
addWorksheet(wb, "001", gridLines = TRUE)
addWorksheet(wb, "002", gridLines = TRUE)
addWorksheet(wb, "003", gridLines = TRUE)
addWorksheet(wb, "004", gridLines = TRUE)
addWorksheet(wb, "005", gridLines = TRUE)
bodyStyle <- createStyle(border = "TopBottom", borderColour = "#4F81BD")
mclapply(1:5, function(x) {
addStyle(wb, sheet = x, bodyStyle, rows = 2:6, cols = 1:6, gridExpand = TRUE)
}, mc.cores = 5)
saveWorkbook(wb, "Downloads/addStyleExample.xlsx", overwrite = TRUE)
wb2 <- createWorkbook("sample_workbook2")
addWorksheet(wb2, "001", gridLines = TRUE)
addWorksheet(wb2, "002", gridLines = TRUE)
addWorksheet(wb2, "003", gridLines = TRUE)
addWorksheet(wb2, "004", gridLines = TRUE)
addWorksheet(wb2, "005", gridLines = TRUE)
lapply(1:5, function(x) {
addStyle(wb2, sheet = x, bodyStyle, rows = 2:6, cols = 1:6, gridExpand = TRUE)
})
saveWorkbook(wb2, "Downloads/addStyleExample2.xlsx", overwrite = TRUE)
month_seq
shiny::runApp('Documents/ShinySandbox/sandbox14')
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear"))
shiny::runApp('Documents/ShinySandbox/sandbox14')
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear"))
runApp('Documents/ShinySandbox/sandbox14')
runApp('Documents/ShinySandbox/sandbox14')
library(tidyverse)
runApp('Documents/ShinySandbox/sandbox14')
runApp('Documents/ShinySandbox/sandbox14')
runApp('Documents/ShinySandbox/sandbox14')
input[["groups"]]
Group = c(
"Group1",
"Group1",
"Group1",
"Group1",
"Group2",
"Group2",
"Group2",
"Group2",
"Group3"
)
Choice = c(
"Choice1",
"Choice2",
"Choice3",
"Choice4",
"Choice1",
"Choice2",
"Choice3",
"Choice4",
"Choice5"
)
df <- data.frame(Group, Choice) %>% mutate(name=paste0(Group,Choice))
vals <- split(df$Choice,df$Group)
nams <- split(df$name,df$Group)
View(vals)
View(nams)
View(df)
runApp('Documents/ShinySandbox/sandbox14')
input[["groups"]]
Group = c(
"Group1",
"Group1",
"Group1",
"Group1",
"Group2",
"Group2",
"Group2",
"Group2",
"Group3"
)
Choice = c(
"Choice1",
"Choice2",
"Choice3",
"Choice4",
"Choice1",
"Choice2",
"Choice3",
"Choice4",
"Choice5"
)
df <- data.frame(Group, Choice) %>% mutate(name=paste0(Group, "|", Choice))
View(df)
vals <- split(df$Choice,df$Group)
View(vals)
list_of_choices <- map2(nams,vals,~{names(.x)<-.y;.x})
list_of_choices
df <- data.frame(Group, Choice) %>% mutate(name=Choice)
vals <- split(df$Choice,df$Group)
nams <- split(df$name,df$Group)
list_of_choices <- map2(nams,vals,~{names(.x)<-.y;.x})
list_of_choices
list_of_choices$Group1
list_of_choices$Group1 %>% class()
shiny::runApp('Documents/ShinySandbox/sandbox15')
runApp('Documents/ShinySandbox/sandbox15')
R.version()
R.version
pak::pak("r-lib/usethis")
install.packages("pak")
pak::pak("r-lib/usethis")
library(charttr)
install.packages("chattr")
remotes::install_github("mlverse/chattr")
library(chartr)
library(chattr)
chattr::chattr_app()
shiny::runApp('Documents/ShinySandbox/sandbox16')
runApp('Documents/ShinySandbox/sandbox16')
runApp('Documents/ShinySandbox/sandbox16')
runApp('Documents/ShinySandbox/sandbox16')
View(data)
runApp('Documents/ShinySandbox/sandbox16')
View(data)
runApp('Documents/ShinySandbox/sandbox16')
runApp('Documents/ShinySandbox/sandbox16')
runApp('Documents/ShinySandbox/sandbox16')
runApp('Documents/ShinySandbox/sandbox16')
runApp('Documents/ShinySandbox/sandbox16')
runApp('Documents/ShinySandbox/sandbox16')
runApp('Documents/ShinySandbox/sandbox16')
runApp('Documents/ShinySandbox/sandbox16')
data %>%
rename(
`Single detached house` = Single.detached.house,
`Semi detached house` = Semi.detached.house,
`Row house` = Row.house,
Duplex = Apartment.or.flat.in.a.duplex,
`Apartment (less than 5 storeys)` = Apartment.in.a.building.that.has.fewer.than.five.storeys,
`Apartment (5 or more storeys)` = Apartment.in.a.building.that.has.five.or.more.storeys
)
runApp('Documents/ShinySandbox/sandbox16')
runApp('Documents/ShinySandbox/sandbox16')
data %>%
filter(GEO_NAME %in% input$subdivision) %>%
select(GEO_NAME, all_of(c("Total.private.dwellings", dwelling_columns))) %>%
# Convert all dwelling type counts to percentages, round to 1 decimal place, and add percent sign
mutate_at(vars(dwelling_columns), ~ paste0(round(. / Total.private.dwellings * 100, 1), "%"))
# Filter data based on user input
data <- data %>%
filter(GEO_NAME %in% input$subdivision) %>%
select(GEO_NAME, all_of(c("Total.private.dwellings", dwelling_columns))) %>%
# Convert all dwelling type counts to percentages, round to 1 decimal place, and add percent sign
mutate_at(vars(dwelling_columns), ~ paste0(round(. / Total.private.dwellings * 100, 1), "%"))
# Some of the dwelling type columns have very long names. We need to shorten them.
# We will also replace "." with " " in the column names.
data %>%
rename(
`Single detached house` = Single.detached.house,
`Semi detached house` = Semi.detached.house,
`Row house` = Row.house,
Duplex = Apartment.or.flat.in.a.duplex,
`Apartment (less than 5 storeys)` = Apartment.in.a.building.that.has.fewer.than.five.storeys,
`Apartment (5 or more storeys)` = Apartment.in.a.building.that.has.five.or.more.storeys
)
runApp('Documents/ShinySandbox/sandbox16')
library(chattr)
chattr::chattr_app()
runApp('Documents/ShinySandbox/sandbox18')
runApp('Documents/ShinySandbox/sandbox18')
runApp('Documents/ShinySandbox/sandbox18')
# Create a data frame with sample data
df <- data.frame(Name = c("John", "Jane", "Michael"),
Age = c(25, 30, 35))
sapply((1:nrow(df)), function(i) {
actionButton(inputId = paste0("button", i),
label = "Click")
})
apply((1:nrow(df)), function(i) {
actionButton(inputId = paste0("button", i),
label = "Click")
})
map((1:nrow(df)), function(i) {
actionButton(inputId = paste0("button", i),
label = "Click")
})
library(purrr)
map((1:nrow(df)), function(i) {
actionButton(inputId = paste0("button", i),
label = "Click")
})
runApp('Documents/ShinySandbox/sandbox18')
actionButton(inputId = paste0("button", i),
label = "Click")
actionButton(inputId = paste0("button"),
label = "Click")
source('Documents/ShinySandbox/sandbox18/app.R')
source('Documents/ShinySandbox/sandbox18/app.R')
source('Documents/ShinySandbox/sandbox18/app.R')
source('Documents/ShinySandbox/sandbox18/app.R')
source('Documents/ShinySandbox/sandbox18/app.R')
source('Documents/ShinySandbox/sandbox18/app.R')
source('Documents/ShinySandbox/sandbox18/app.R')
source('Documents/ShinySandbox/sandbox18/app.R')
source('Documents/ShinySandbox/sandbox18/app.R')
source('Documents/ShinySandbox/sandbox18/app.R')
input$button1
input$table_cell_clicked
R.Version()
# Create a Shiny app that retrieves and displays stock price data.
# We will use the quantmod package to retrieve stock price data from Yahoo Finance.
# Load the required packages
library(shiny)
library(quantmod)
library(tibble)
library(tidyr)
library(ggplot2)
# The UI part of the app
# It should have an input and an output component
# Input should be a multi-select dropdown menu that allows the user to select multiple stock symbols
# The stock symbols allowed include: AAPL, GOOGL, MSFT, AMZN, FB, TSLA, NVDA, INTC, CSCO, and ADBE
# Output should comprise one table and one plot.
# The table should display the stock price data for the selected stock symbols.
# The plot should be made with the ggplot2 package and should display the stock price data for the selected stock symbols.
ui <- fluidPage(
titlePanel("Stock Price Data"),
sidebarLayout(
sidebarPanel(
selectInput("stock", "Select Stock Symbols",
choices = c("AAPL", "GOOGL", "MSFT", "AMZN", "META", "TSLA", "NVDA", "INTC", "CSCO", "ADBE"),
# AAPL should be selected by default
selected = "AAPL",
multiple = TRUE)
),
mainPanel(
tableOutput("stock_table"),
plotOutput("stock_plot")
)
)
)
# The server part of the app
# It should have a function that retrieves stock price data from Yahoo Finance
# The function should return a data frame with the stock price data
# The server part should also have a function that creates a plot of the stock price data using ggplot2
# The server part should also have a function that renders the table and plot in the UI
server <- function(input, output) {
# Function to retrieve stock price data
# This function should have two arguments:
# stock_symbols (a character vector of stock symbols)
# start_date (a character string representing the start date)
# This function should return a data frame with the stock price data, from the start date to the current date
get_stock_data <- function(stock_symbols, start_date = "2020-01-01") {
stock_data <- lapply(stock_symbols, function(symbol) {
stock_data <- getSymbols(symbol, from = start_date, auto.assign = FALSE)
stock_data <- tibble(date = index(stock_data),
close = coredata(Cl(stock_data))[, 1],
symbol = symbol)
})
do.call(rbind, stock_data)
}
# Create a reactive object to store the stock data
stock_data <- reactive({
get_stock_data(input$stock, start_date = "2024-05-01")
})
# Function to create a plot of the stock price data
create_stock_plot <- function(data) {
req(nrow(data) > 0)
ggplot(data, aes(x = date, y = close, color = symbol)) +
geom_line() +
labs(title = "Stock Price Data",
x = "Date",
y = "Close Price",
color = "Stock Symbol") +
theme_minimal()
}
# Function to create a table of the stock price data
# The input data is in long format,
# We need to convert it to wide format for display in the table
# Each stock symbol should have its own column
create_stock_table <- function(data) {
stock_data_wide <- data %>% spread(symbol, close)
stock_data_wide
}
# Create a reactive value to store the table object
stock_table_rv <- reactive({
create_stock_table(stock_data())
})
# Create a reactive value to store the plot object
stock_plot_rv <- reactive({
create_stock_plot(stock_data())
})
# Render the table and plot in the UI
output$stock_table <- renderTable({
stock_table_rv()
})
output$stock_plot <- renderPlot({
stock_plot_rv()
})
# Use exportTestValues() to export the stock data, table, and plot for testing
exportTestValues(stock_data = stock_data(),
stock_table_rv = stock_table_rv(),
stock_plot_rv = stock_plot_rv()
)
}
# Run the Shiny app
stock_app <- shinyApp(ui = ui, server = server)
shinytest2::test_app("app.R")
setwd("/Users/markwang/Documents/ShinySandbox/DwellingON")
shinytest2::test_app("app.R")
shinytest2::test_app("app.R")
setwd("/Users/markwang/Documents/ShinySandbox/DwellingON")
setwd("/Users/markwang/Documents/ShinySandbox/DwellingON")
shinytest2::test_app("app.R")
setwd("~/Documents/ShinySandbox/sandbox22")
shinytest2::test_app("app.R")
stock_plot
ggplot_build(stock_plot)
ggplot_build(stock_plot)$layout
ggplot_build(stock_plot)$layout$panel_params[[1]]
ggplot_build(stock_plot)$layout$panel_params[[1]]$x.labels
shinytest2::test_app("app.R")
shinytest2::test_app("app.R")
str_detect(ggplot_build(stock_plot)$layout$panel_params[[1]]$x_lab
)
ggplot_build(stock_plot)$layout$panel_params[[1]]$x_lab
ggplot_build(stock_plot)$layout$panel_params[[1]]$
k
ggplot_build(stock_plot)$layout$panel_params
ggplot_build(stock_plot)$layout$panel_params[[1]]
ggplot_build(stock_plot)$layout$panel_params[[1]]$x.labels
ggplot_build(stock_plot)$layout$panel_params[[1]] %>% names()
ggplot_build(stock_plot) %>% names()
ggplot_build(stock_plot)$plot
ggplot_build(stock_plot)$plot %>% names()
ggplot_build(stock_plot)$plot$labels
shinytest2::test_app("app.R")
shinytest2::test_app("app.R")
shinytest2::test_app("app.R")
record_test()
runApp()
stock_data_wide
View(stock_data_wide)
stock_data_wide
runApp()
runApp()
runApp()
runApp()
record_test()
record_test()
runApp()
record_test()
record_test()
record_test()
record_test()
record_test()
runApp()
record_test()
record_test()
record_test()
runApp()
runApp()
runApp()
runApp()
stock_data_wide
runApp()
record_test()
record_test()
record_test()
# Load application support files into testing environment
shinytest2::load_app_env()
shinytest2::test_app("app.R")
record_test()
shinytest2::test_app("app.R")
shinytest2::test_app("app.R")
app$expect_values()
app$get_value(input = "stock")
setwd("~/Documents/ShinySandbox/tech_stock_app2")
runApp()
runApp()
shinytest2::record_test()
shinytest2::record_test()
shinytest2::record_test()
shinytest2::record_test()
